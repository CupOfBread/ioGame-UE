// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace pb {
namespace common {
class ClassesPb;
struct ClassesPbDefaultTypeInternal;
extern ClassesPbDefaultTypeInternal _ClassesPb_default_instance_;
class LogicRequestPb;
struct LogicRequestPbDefaultTypeInternal;
extern LogicRequestPbDefaultTypeInternal _LogicRequestPb_default_instance_;
class LoginVerify;
struct LoginVerifyDefaultTypeInternal;
extern LoginVerifyDefaultTypeInternal _LoginVerify_default_instance_;
class OtherVerify;
struct OtherVerifyDefaultTypeInternal;
extern OtherVerifyDefaultTypeInternal _OtherVerify_default_instance_;
class RoomNumPb;
struct RoomNumPbDefaultTypeInternal;
extern RoomNumPbDefaultTypeInternal _RoomNumPb_default_instance_;
class SchoolLevelPb;
struct SchoolLevelPbDefaultTypeInternal;
extern SchoolLevelPbDefaultTypeInternal _SchoolLevelPb_default_instance_;
class SchoolPb;
struct SchoolPbDefaultTypeInternal;
extern SchoolPbDefaultTypeInternal _SchoolPb_default_instance_;
class SpringBroadcastMessagePb;
struct SpringBroadcastMessagePbDefaultTypeInternal;
extern SpringBroadcastMessagePbDefaultTypeInternal _SpringBroadcastMessagePb_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::common::ClassesPb* Arena::CreateMaybeMessage<::pb::common::ClassesPb>(Arena*);
template<> ::pb::common::LogicRequestPb* Arena::CreateMaybeMessage<::pb::common::LogicRequestPb>(Arena*);
template<> ::pb::common::LoginVerify* Arena::CreateMaybeMessage<::pb::common::LoginVerify>(Arena*);
template<> ::pb::common::OtherVerify* Arena::CreateMaybeMessage<::pb::common::OtherVerify>(Arena*);
template<> ::pb::common::RoomNumPb* Arena::CreateMaybeMessage<::pb::common::RoomNumPb>(Arena*);
template<> ::pb::common::SchoolLevelPb* Arena::CreateMaybeMessage<::pb::common::SchoolLevelPb>(Arena*);
template<> ::pb::common::SchoolPb* Arena::CreateMaybeMessage<::pb::common::SchoolPb>(Arena*);
template<> ::pb::common::SpringBroadcastMessagePb* Arena::CreateMaybeMessage<::pb::common::SpringBroadcastMessagePb>(Arena*);
template<> ::pb::common::UserInfo* Arena::CreateMaybeMessage<::pb::common::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace common {

// ===================================================================

class SchoolLevelPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.SchoolLevelPb) */ {
 public:
  inline SchoolLevelPb() : SchoolLevelPb(nullptr) {}
  ~SchoolLevelPb() override;
  explicit PROTOBUF_CONSTEXPR SchoolLevelPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchoolLevelPb(const SchoolLevelPb& from);
  SchoolLevelPb(SchoolLevelPb&& from) noexcept
    : SchoolLevelPb() {
    *this = ::std::move(from);
  }

  inline SchoolLevelPb& operator=(const SchoolLevelPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchoolLevelPb& operator=(SchoolLevelPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SchoolLevelPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchoolLevelPb* internal_default_instance() {
    return reinterpret_cast<const SchoolLevelPb*>(
               &_SchoolLevelPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SchoolLevelPb& a, SchoolLevelPb& b) {
    a.Swap(&b);
  }
  inline void Swap(SchoolLevelPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchoolLevelPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SchoolLevelPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SchoolLevelPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SchoolLevelPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SchoolLevelPb& from) {
    SchoolLevelPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchoolLevelPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.SchoolLevelPb";
  }
  protected:
  explicit SchoolLevelPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kVipLevelFieldNumber = 2,
  };
  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 vipLevel = 2;
  void clear_viplevel();
  int32_t viplevel() const;
  void set_viplevel(int32_t value);
  private:
  int32_t _internal_viplevel() const;
  void _internal_set_viplevel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.SchoolLevelPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t level_;
    int32_t viplevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OtherVerify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.OtherVerify) */ {
 public:
  inline OtherVerify() : OtherVerify(nullptr) {}
  ~OtherVerify() override;
  explicit PROTOBUF_CONSTEXPR OtherVerify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherVerify(const OtherVerify& from);
  OtherVerify(OtherVerify&& from) noexcept
    : OtherVerify() {
    *this = ::std::move(from);
  }

  inline OtherVerify& operator=(const OtherVerify& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherVerify& operator=(OtherVerify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherVerify& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherVerify* internal_default_instance() {
    return reinterpret_cast<const OtherVerify*>(
               &_OtherVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OtherVerify& a, OtherVerify& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherVerify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherVerify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherVerify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherVerify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherVerify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OtherVerify& from) {
    OtherVerify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherVerify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.OtherVerify";
  }
  protected:
  explicit OtherVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 1,
  };
  // string jwt = 1;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_NODISCARD std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // @@protoc_insertion_point(class_scope:pb.common.OtherVerify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RoomNumPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.RoomNumPb) */ {
 public:
  inline RoomNumPb() : RoomNumPb(nullptr) {}
  ~RoomNumPb() override;
  explicit PROTOBUF_CONSTEXPR RoomNumPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomNumPb(const RoomNumPb& from);
  RoomNumPb(RoomNumPb&& from) noexcept
    : RoomNumPb() {
    *this = ::std::move(from);
  }

  inline RoomNumPb& operator=(const RoomNumPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomNumPb& operator=(RoomNumPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomNumPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomNumPb* internal_default_instance() {
    return reinterpret_cast<const RoomNumPb*>(
               &_RoomNumPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomNumPb& a, RoomNumPb& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomNumPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomNumPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomNumPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomNumPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomNumPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomNumPb& from) {
    RoomNumPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomNumPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.RoomNumPb";
  }
  protected:
  explicit RoomNumPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCountFieldNumber = 1,
  };
  // int32 roomCount = 1;
  void clear_roomcount();
  int32_t roomcount() const;
  void set_roomcount(int32_t value);
  private:
  int32_t _internal_roomcount() const;
  void _internal_set_roomcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.RoomNumPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t roomcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kTimeFieldNumber = 4,
    kTime2FieldNumber = 5,
    kTempIntFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 time = 4;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 time2 = 5;
  void clear_time2();
  int64_t time2() const;
  void set_time2(int64_t value);
  private:
  int64_t _internal_time2() const;
  void _internal_set_time2(int64_t value);
  public:

  // int32 tempInt = 3;
  void clear_tempint();
  int32_t tempint() const;
  void set_tempint(int32_t value);
  private:
  int32_t _internal_tempint() const;
  void _internal_set_tempint(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t id_;
    int64_t time_;
    int64_t time2_;
    int32_t tempint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class LoginVerify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.LoginVerify) */ {
 public:
  inline LoginVerify() : LoginVerify(nullptr) {}
  ~LoginVerify() override;
  explicit PROTOBUF_CONSTEXPR LoginVerify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginVerify(const LoginVerify& from);
  LoginVerify(LoginVerify&& from) noexcept
    : LoginVerify() {
    *this = ::std::move(from);
  }

  inline LoginVerify& operator=(const LoginVerify& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginVerify& operator=(LoginVerify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginVerify& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginVerify* internal_default_instance() {
    return reinterpret_cast<const LoginVerify*>(
               &_LoginVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginVerify& a, LoginVerify& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginVerify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginVerify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginVerify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginVerify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginVerify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginVerify& from) {
    LoginVerify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginVerify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.LoginVerify";
  }
  protected:
  explicit LoginVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 2,
    kAgeFieldNumber = 1,
    kLoginBizCodeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kTime2FieldNumber = 5,
  };
  // string jwt = 2;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_NODISCARD std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // int32 age = 1;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 loginBizCode = 3;
  void clear_loginbizcode();
  int32_t loginbizcode() const;
  void set_loginbizcode(int32_t value);
  private:
  int32_t _internal_loginbizcode() const;
  void _internal_set_loginbizcode(int32_t value);
  public:

  // int64 time = 4;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 time2 = 5;
  void clear_time2();
  int64_t time2() const;
  void set_time2(int64_t value);
  private:
  int64_t _internal_time2() const;
  void _internal_set_time2(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.LoginVerify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
    int32_t age_;
    int32_t loginbizcode_;
    int64_t time_;
    int64_t time2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ClassesPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.ClassesPb) */ {
 public:
  inline ClassesPb() : ClassesPb(nullptr) {}
  ~ClassesPb() override;
  explicit PROTOBUF_CONSTEXPR ClassesPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassesPb(const ClassesPb& from);
  ClassesPb(ClassesPb&& from) noexcept
    : ClassesPb() {
    *this = ::std::move(from);
  }

  inline ClassesPb& operator=(const ClassesPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassesPb& operator=(ClassesPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClassesPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassesPb* internal_default_instance() {
    return reinterpret_cast<const ClassesPb*>(
               &_ClassesPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClassesPb& a, ClassesPb& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassesPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassesPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassesPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassesPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClassesPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClassesPb& from) {
    ClassesPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassesPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.ClassesPb";
  }
  protected:
  explicit ClassesPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentNumFieldNumber = 1,
  };
  // int32 studentNum = 1;
  void clear_studentnum();
  int32_t studentnum() const;
  void set_studentnum(int32_t value);
  private:
  int32_t _internal_studentnum() const;
  void _internal_set_studentnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.ClassesPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t studentnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SchoolPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.SchoolPb) */ {
 public:
  inline SchoolPb() : SchoolPb(nullptr) {}
  ~SchoolPb() override;
  explicit PROTOBUF_CONSTEXPR SchoolPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchoolPb(const SchoolPb& from);
  SchoolPb(SchoolPb&& from) noexcept
    : SchoolPb() {
    *this = ::std::move(from);
  }

  inline SchoolPb& operator=(const SchoolPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchoolPb& operator=(SchoolPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SchoolPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchoolPb* internal_default_instance() {
    return reinterpret_cast<const SchoolPb*>(
               &_SchoolPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SchoolPb& a, SchoolPb& b) {
    a.Swap(&b);
  }
  inline void Swap(SchoolPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchoolPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SchoolPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SchoolPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SchoolPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SchoolPb& from) {
    SchoolPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchoolPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.SchoolPb";
  }
  protected:
  explicit SchoolPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kNameFieldNumber = 4,
    kClassCapacityFieldNumber = 2,
    kTeacherNumFieldNumber = 3,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 classCapacity = 2;
  void clear_classcapacity();
  int32_t classcapacity() const;
  void set_classcapacity(int32_t value);
  private:
  int32_t _internal_classcapacity() const;
  void _internal_set_classcapacity(int32_t value);
  public:

  // int32 teacherNum = 3;
  void clear_teachernum();
  int32_t teachernum() const;
  void set_teachernum(int32_t value);
  private:
  int32_t _internal_teachernum() const;
  void _internal_set_teachernum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.SchoolPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t classcapacity_;
    int32_t teachernum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SpringBroadcastMessagePb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.SpringBroadcastMessagePb) */ {
 public:
  inline SpringBroadcastMessagePb() : SpringBroadcastMessagePb(nullptr) {}
  ~SpringBroadcastMessagePb() override;
  explicit PROTOBUF_CONSTEXPR SpringBroadcastMessagePb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpringBroadcastMessagePb(const SpringBroadcastMessagePb& from);
  SpringBroadcastMessagePb(SpringBroadcastMessagePb&& from) noexcept
    : SpringBroadcastMessagePb() {
    *this = ::std::move(from);
  }

  inline SpringBroadcastMessagePb& operator=(const SpringBroadcastMessagePb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpringBroadcastMessagePb& operator=(SpringBroadcastMessagePb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpringBroadcastMessagePb& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpringBroadcastMessagePb* internal_default_instance() {
    return reinterpret_cast<const SpringBroadcastMessagePb*>(
               &_SpringBroadcastMessagePb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SpringBroadcastMessagePb& a, SpringBroadcastMessagePb& b) {
    a.Swap(&b);
  }
  inline void Swap(SpringBroadcastMessagePb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpringBroadcastMessagePb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpringBroadcastMessagePb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpringBroadcastMessagePb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpringBroadcastMessagePb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpringBroadcastMessagePb& from) {
    SpringBroadcastMessagePb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpringBroadcastMessagePb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.SpringBroadcastMessagePb";
  }
  protected:
  explicit SpringBroadcastMessagePb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:pb.common.SpringBroadcastMessagePb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class LogicRequestPb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.LogicRequestPb) */ {
 public:
  inline LogicRequestPb() : LogicRequestPb(nullptr) {}
  ~LogicRequestPb() override;
  explicit PROTOBUF_CONSTEXPR LogicRequestPb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicRequestPb(const LogicRequestPb& from);
  LogicRequestPb(LogicRequestPb&& from) noexcept
    : LogicRequestPb() {
    *this = ::std::move(from);
  }

  inline LogicRequestPb& operator=(const LogicRequestPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicRequestPb& operator=(LogicRequestPb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicRequestPb& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicRequestPb* internal_default_instance() {
    return reinterpret_cast<const LogicRequestPb*>(
               &_LogicRequestPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LogicRequestPb& a, LogicRequestPb& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicRequestPb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicRequestPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicRequestPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicRequestPb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicRequestPb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicRequestPb& from) {
    LogicRequestPb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicRequestPb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.LogicRequestPb";
  }
  protected:
  explicit LogicRequestPb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.common.LogicRequestPb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchoolLevelPb

// int32 level = 1;
inline void SchoolLevelPb::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SchoolLevelPb::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SchoolLevelPb::level() const {
  // @@protoc_insertion_point(field_get:pb.common.SchoolLevelPb.level)
  return _internal_level();
}
inline void SchoolLevelPb::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SchoolLevelPb::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.common.SchoolLevelPb.level)
}

// int32 vipLevel = 2;
inline void SchoolLevelPb::clear_viplevel() {
  _impl_.viplevel_ = 0;
}
inline int32_t SchoolLevelPb::_internal_viplevel() const {
  return _impl_.viplevel_;
}
inline int32_t SchoolLevelPb::viplevel() const {
  // @@protoc_insertion_point(field_get:pb.common.SchoolLevelPb.vipLevel)
  return _internal_viplevel();
}
inline void SchoolLevelPb::_internal_set_viplevel(int32_t value) {
  
  _impl_.viplevel_ = value;
}
inline void SchoolLevelPb::set_viplevel(int32_t value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:pb.common.SchoolLevelPb.vipLevel)
}

// -------------------------------------------------------------------

// OtherVerify

// string jwt = 1;
inline void OtherVerify::clear_jwt() {
  _impl_.jwt_.ClearToEmpty();
}
inline const std::string& OtherVerify::jwt() const {
  // @@protoc_insertion_point(field_get:pb.common.OtherVerify.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OtherVerify::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.OtherVerify.jwt)
}
inline std::string* OtherVerify::mutable_jwt() {
  std::string* _s = _internal_mutable_jwt();
  // @@protoc_insertion_point(field_mutable:pb.common.OtherVerify.jwt)
  return _s;
}
inline const std::string& OtherVerify::_internal_jwt() const {
  return _impl_.jwt_.Get();
}
inline void OtherVerify::_internal_set_jwt(const std::string& value) {
  
  _impl_.jwt_.Set(value, GetArenaForAllocation());
}
inline std::string* OtherVerify::_internal_mutable_jwt() {
  
  return _impl_.jwt_.Mutable(GetArenaForAllocation());
}
inline std::string* OtherVerify::release_jwt() {
  // @@protoc_insertion_point(field_release:pb.common.OtherVerify.jwt)
  return _impl_.jwt_.Release();
}
inline void OtherVerify::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  _impl_.jwt_.SetAllocated(jwt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwt_.IsDefault()) {
    _impl_.jwt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.OtherVerify.jwt)
}

// -------------------------------------------------------------------

// RoomNumPb

// int32 roomCount = 1;
inline void RoomNumPb::clear_roomcount() {
  _impl_.roomcount_ = 0;
}
inline int32_t RoomNumPb::_internal_roomcount() const {
  return _impl_.roomcount_;
}
inline int32_t RoomNumPb::roomcount() const {
  // @@protoc_insertion_point(field_get:pb.common.RoomNumPb.roomCount)
  return _internal_roomcount();
}
inline void RoomNumPb::_internal_set_roomcount(int32_t value) {
  
  _impl_.roomcount_ = value;
}
inline void RoomNumPb::set_roomcount(int32_t value) {
  _internal_set_roomcount(value);
  // @@protoc_insertion_point(field_set:pb.common.RoomNumPb.roomCount)
}

// -------------------------------------------------------------------

// UserInfo

// int64 id = 1;
inline void UserInfo::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t UserInfo::_internal_id() const {
  return _impl_.id_;
}
inline int64_t UserInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.common.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void UserInfo::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.common.UserInfo.id)
}

// string name = 2;
inline void UserInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.common.UserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.common.UserInfo.name)
  return _s;
}
inline const std::string& UserInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:pb.common.UserInfo.name)
  return _impl_.name_.Release();
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.UserInfo.name)
}

// int32 tempInt = 3;
inline void UserInfo::clear_tempint() {
  _impl_.tempint_ = 0;
}
inline int32_t UserInfo::_internal_tempint() const {
  return _impl_.tempint_;
}
inline int32_t UserInfo::tempint() const {
  // @@protoc_insertion_point(field_get:pb.common.UserInfo.tempInt)
  return _internal_tempint();
}
inline void UserInfo::_internal_set_tempint(int32_t value) {
  
  _impl_.tempint_ = value;
}
inline void UserInfo::set_tempint(int32_t value) {
  _internal_set_tempint(value);
  // @@protoc_insertion_point(field_set:pb.common.UserInfo.tempInt)
}

// int64 time = 4;
inline void UserInfo::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t UserInfo::_internal_time() const {
  return _impl_.time_;
}
inline int64_t UserInfo::time() const {
  // @@protoc_insertion_point(field_get:pb.common.UserInfo.time)
  return _internal_time();
}
inline void UserInfo::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void UserInfo::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.common.UserInfo.time)
}

// int64 time2 = 5;
inline void UserInfo::clear_time2() {
  _impl_.time2_ = int64_t{0};
}
inline int64_t UserInfo::_internal_time2() const {
  return _impl_.time2_;
}
inline int64_t UserInfo::time2() const {
  // @@protoc_insertion_point(field_get:pb.common.UserInfo.time2)
  return _internal_time2();
}
inline void UserInfo::_internal_set_time2(int64_t value) {
  
  _impl_.time2_ = value;
}
inline void UserInfo::set_time2(int64_t value) {
  _internal_set_time2(value);
  // @@protoc_insertion_point(field_set:pb.common.UserInfo.time2)
}

// -------------------------------------------------------------------

// LoginVerify

// int32 age = 1;
inline void LoginVerify::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t LoginVerify::_internal_age() const {
  return _impl_.age_;
}
inline int32_t LoginVerify::age() const {
  // @@protoc_insertion_point(field_get:pb.common.LoginVerify.age)
  return _internal_age();
}
inline void LoginVerify::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void LoginVerify::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:pb.common.LoginVerify.age)
}

// string jwt = 2;
inline void LoginVerify::clear_jwt() {
  _impl_.jwt_.ClearToEmpty();
}
inline const std::string& LoginVerify::jwt() const {
  // @@protoc_insertion_point(field_get:pb.common.LoginVerify.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginVerify::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.LoginVerify.jwt)
}
inline std::string* LoginVerify::mutable_jwt() {
  std::string* _s = _internal_mutable_jwt();
  // @@protoc_insertion_point(field_mutable:pb.common.LoginVerify.jwt)
  return _s;
}
inline const std::string& LoginVerify::_internal_jwt() const {
  return _impl_.jwt_.Get();
}
inline void LoginVerify::_internal_set_jwt(const std::string& value) {
  
  _impl_.jwt_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginVerify::_internal_mutable_jwt() {
  
  return _impl_.jwt_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginVerify::release_jwt() {
  // @@protoc_insertion_point(field_release:pb.common.LoginVerify.jwt)
  return _impl_.jwt_.Release();
}
inline void LoginVerify::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  _impl_.jwt_.SetAllocated(jwt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwt_.IsDefault()) {
    _impl_.jwt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.LoginVerify.jwt)
}

// int32 loginBizCode = 3;
inline void LoginVerify::clear_loginbizcode() {
  _impl_.loginbizcode_ = 0;
}
inline int32_t LoginVerify::_internal_loginbizcode() const {
  return _impl_.loginbizcode_;
}
inline int32_t LoginVerify::loginbizcode() const {
  // @@protoc_insertion_point(field_get:pb.common.LoginVerify.loginBizCode)
  return _internal_loginbizcode();
}
inline void LoginVerify::_internal_set_loginbizcode(int32_t value) {
  
  _impl_.loginbizcode_ = value;
}
inline void LoginVerify::set_loginbizcode(int32_t value) {
  _internal_set_loginbizcode(value);
  // @@protoc_insertion_point(field_set:pb.common.LoginVerify.loginBizCode)
}

// int64 time = 4;
inline void LoginVerify::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t LoginVerify::_internal_time() const {
  return _impl_.time_;
}
inline int64_t LoginVerify::time() const {
  // @@protoc_insertion_point(field_get:pb.common.LoginVerify.time)
  return _internal_time();
}
inline void LoginVerify::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void LoginVerify::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.common.LoginVerify.time)
}

// int64 time2 = 5;
inline void LoginVerify::clear_time2() {
  _impl_.time2_ = int64_t{0};
}
inline int64_t LoginVerify::_internal_time2() const {
  return _impl_.time2_;
}
inline int64_t LoginVerify::time2() const {
  // @@protoc_insertion_point(field_get:pb.common.LoginVerify.time2)
  return _internal_time2();
}
inline void LoginVerify::_internal_set_time2(int64_t value) {
  
  _impl_.time2_ = value;
}
inline void LoginVerify::set_time2(int64_t value) {
  _internal_set_time2(value);
  // @@protoc_insertion_point(field_set:pb.common.LoginVerify.time2)
}

// -------------------------------------------------------------------

// ClassesPb

// int32 studentNum = 1;
inline void ClassesPb::clear_studentnum() {
  _impl_.studentnum_ = 0;
}
inline int32_t ClassesPb::_internal_studentnum() const {
  return _impl_.studentnum_;
}
inline int32_t ClassesPb::studentnum() const {
  // @@protoc_insertion_point(field_get:pb.common.ClassesPb.studentNum)
  return _internal_studentnum();
}
inline void ClassesPb::_internal_set_studentnum(int32_t value) {
  
  _impl_.studentnum_ = value;
}
inline void ClassesPb::set_studentnum(int32_t value) {
  _internal_set_studentnum(value);
  // @@protoc_insertion_point(field_set:pb.common.ClassesPb.studentNum)
}

// -------------------------------------------------------------------

// SchoolPb

// string email = 1;
inline void SchoolPb::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SchoolPb::email() const {
  // @@protoc_insertion_point(field_get:pb.common.SchoolPb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SchoolPb::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.SchoolPb.email)
}
inline std::string* SchoolPb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:pb.common.SchoolPb.email)
  return _s;
}
inline const std::string& SchoolPb::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SchoolPb::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SchoolPb::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* SchoolPb::release_email() {
  // @@protoc_insertion_point(field_release:pb.common.SchoolPb.email)
  return _impl_.email_.Release();
}
inline void SchoolPb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.SchoolPb.email)
}

// int32 classCapacity = 2;
inline void SchoolPb::clear_classcapacity() {
  _impl_.classcapacity_ = 0;
}
inline int32_t SchoolPb::_internal_classcapacity() const {
  return _impl_.classcapacity_;
}
inline int32_t SchoolPb::classcapacity() const {
  // @@protoc_insertion_point(field_get:pb.common.SchoolPb.classCapacity)
  return _internal_classcapacity();
}
inline void SchoolPb::_internal_set_classcapacity(int32_t value) {
  
  _impl_.classcapacity_ = value;
}
inline void SchoolPb::set_classcapacity(int32_t value) {
  _internal_set_classcapacity(value);
  // @@protoc_insertion_point(field_set:pb.common.SchoolPb.classCapacity)
}

// int32 teacherNum = 3;
inline void SchoolPb::clear_teachernum() {
  _impl_.teachernum_ = 0;
}
inline int32_t SchoolPb::_internal_teachernum() const {
  return _impl_.teachernum_;
}
inline int32_t SchoolPb::teachernum() const {
  // @@protoc_insertion_point(field_get:pb.common.SchoolPb.teacherNum)
  return _internal_teachernum();
}
inline void SchoolPb::_internal_set_teachernum(int32_t value) {
  
  _impl_.teachernum_ = value;
}
inline void SchoolPb::set_teachernum(int32_t value) {
  _internal_set_teachernum(value);
  // @@protoc_insertion_point(field_set:pb.common.SchoolPb.teacherNum)
}

// string name = 4;
inline void SchoolPb::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SchoolPb::name() const {
  // @@protoc_insertion_point(field_get:pb.common.SchoolPb.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SchoolPb::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.SchoolPb.name)
}
inline std::string* SchoolPb::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.common.SchoolPb.name)
  return _s;
}
inline const std::string& SchoolPb::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SchoolPb::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SchoolPb::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SchoolPb::release_name() {
  // @@protoc_insertion_point(field_release:pb.common.SchoolPb.name)
  return _impl_.name_.Release();
}
inline void SchoolPb::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.SchoolPb.name)
}

// -------------------------------------------------------------------

// SpringBroadcastMessagePb

// string msg = 1;
inline void SpringBroadcastMessagePb::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SpringBroadcastMessagePb::msg() const {
  // @@protoc_insertion_point(field_get:pb.common.SpringBroadcastMessagePb.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpringBroadcastMessagePb::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.SpringBroadcastMessagePb.msg)
}
inline std::string* SpringBroadcastMessagePb::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pb.common.SpringBroadcastMessagePb.msg)
  return _s;
}
inline const std::string& SpringBroadcastMessagePb::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void SpringBroadcastMessagePb::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SpringBroadcastMessagePb::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SpringBroadcastMessagePb::release_msg() {
  // @@protoc_insertion_point(field_release:pb.common.SpringBroadcastMessagePb.msg)
  return _impl_.msg_.Release();
}
inline void SpringBroadcastMessagePb::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.SpringBroadcastMessagePb.msg)
}

// -------------------------------------------------------------------

// LogicRequestPb

// string name = 1;
inline void LogicRequestPb::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LogicRequestPb::name() const {
  // @@protoc_insertion_point(field_get:pb.common.LogicRequestPb.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogicRequestPb::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.LogicRequestPb.name)
}
inline std::string* LogicRequestPb::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.common.LogicRequestPb.name)
  return _s;
}
inline const std::string& LogicRequestPb::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LogicRequestPb::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LogicRequestPb::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LogicRequestPb::release_name() {
  // @@protoc_insertion_point(field_release:pb.common.LogicRequestPb.name)
  return _impl_.name_.Release();
}
inline void LogicRequestPb::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.LogicRequestPb.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
