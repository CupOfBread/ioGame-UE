// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eMsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eMsg_2eproto;
namespace pb {
namespace common {
class ExternalMessage;
struct ExternalMessageDefaultTypeInternal;
extern ExternalMessageDefaultTypeInternal _ExternalMessage_default_instance_;
}  // namespace common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::common::ExternalMessage* Arena::CreateMaybeMessage<::pb::common::ExternalMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace common {

// ===================================================================

class ExternalMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.common.ExternalMessage) */ {
 public:
  inline ExternalMessage() : ExternalMessage(nullptr) {}
  ~ExternalMessage() override;
  explicit PROTOBUF_CONSTEXPR ExternalMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalMessage(const ExternalMessage& from);
  ExternalMessage(ExternalMessage&& from) noexcept
    : ExternalMessage() {
    *this = ::std::move(from);
  }

  inline ExternalMessage& operator=(const ExternalMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalMessage& operator=(ExternalMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternalMessage* internal_default_instance() {
    return reinterpret_cast<const ExternalMessage*>(
               &_ExternalMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExternalMessage& a, ExternalMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExternalMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExternalMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExternalMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExternalMessage& from) {
    ExternalMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.common.ExternalMessage";
  }
  protected:
  explicit ExternalMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidMsgFieldNumber = 5,
    kDataFieldNumber = 6,
    kCmdCodeFieldNumber = 1,
    kProtocolSwitchFieldNumber = 2,
    kCmdMergeFieldNumber = 3,
    kResponseStatusFieldNumber = 4,
  };
  // string validMsg = 5;
  void clear_validmsg();
  const std::string& validmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validmsg();
  PROTOBUF_NODISCARD std::string* release_validmsg();
  void set_allocated_validmsg(std::string* validmsg);
  private:
  const std::string& _internal_validmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validmsg(const std::string& value);
  std::string* _internal_mutable_validmsg();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 cmdCode = 1;
  void clear_cmdcode();
  int32_t cmdcode() const;
  void set_cmdcode(int32_t value);
  private:
  int32_t _internal_cmdcode() const;
  void _internal_set_cmdcode(int32_t value);
  public:

  // int32 protocolSwitch = 2;
  void clear_protocolswitch();
  int32_t protocolswitch() const;
  void set_protocolswitch(int32_t value);
  private:
  int32_t _internal_protocolswitch() const;
  void _internal_set_protocolswitch(int32_t value);
  public:

  // int32 cmdMerge = 3;
  void clear_cmdmerge();
  int32_t cmdmerge() const;
  void set_cmdmerge(int32_t value);
  private:
  int32_t _internal_cmdmerge() const;
  void _internal_set_cmdmerge(int32_t value);
  public:

  // int32 responseStatus = 4;
  void clear_responsestatus();
  int32_t responsestatus() const;
  void set_responsestatus(int32_t value);
  private:
  int32_t _internal_responsestatus() const;
  void _internal_set_responsestatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.common.ExternalMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t cmdcode_;
    int32_t protocolswitch_;
    int32_t cmdmerge_;
    int32_t responsestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExternalMessage

// int32 cmdCode = 1;
inline void ExternalMessage::clear_cmdcode() {
  _impl_.cmdcode_ = 0;
}
inline int32_t ExternalMessage::_internal_cmdcode() const {
  return _impl_.cmdcode_;
}
inline int32_t ExternalMessage::cmdcode() const {
  // @@protoc_insertion_point(field_get:pb.common.ExternalMessage.cmdCode)
  return _internal_cmdcode();
}
inline void ExternalMessage::_internal_set_cmdcode(int32_t value) {
  
  _impl_.cmdcode_ = value;
}
inline void ExternalMessage::set_cmdcode(int32_t value) {
  _internal_set_cmdcode(value);
  // @@protoc_insertion_point(field_set:pb.common.ExternalMessage.cmdCode)
}

// int32 protocolSwitch = 2;
inline void ExternalMessage::clear_protocolswitch() {
  _impl_.protocolswitch_ = 0;
}
inline int32_t ExternalMessage::_internal_protocolswitch() const {
  return _impl_.protocolswitch_;
}
inline int32_t ExternalMessage::protocolswitch() const {
  // @@protoc_insertion_point(field_get:pb.common.ExternalMessage.protocolSwitch)
  return _internal_protocolswitch();
}
inline void ExternalMessage::_internal_set_protocolswitch(int32_t value) {
  
  _impl_.protocolswitch_ = value;
}
inline void ExternalMessage::set_protocolswitch(int32_t value) {
  _internal_set_protocolswitch(value);
  // @@protoc_insertion_point(field_set:pb.common.ExternalMessage.protocolSwitch)
}

// int32 cmdMerge = 3;
inline void ExternalMessage::clear_cmdmerge() {
  _impl_.cmdmerge_ = 0;
}
inline int32_t ExternalMessage::_internal_cmdmerge() const {
  return _impl_.cmdmerge_;
}
inline int32_t ExternalMessage::cmdmerge() const {
  // @@protoc_insertion_point(field_get:pb.common.ExternalMessage.cmdMerge)
  return _internal_cmdmerge();
}
inline void ExternalMessage::_internal_set_cmdmerge(int32_t value) {
  
  _impl_.cmdmerge_ = value;
}
inline void ExternalMessage::set_cmdmerge(int32_t value) {
  _internal_set_cmdmerge(value);
  // @@protoc_insertion_point(field_set:pb.common.ExternalMessage.cmdMerge)
}

// int32 responseStatus = 4;
inline void ExternalMessage::clear_responsestatus() {
  _impl_.responsestatus_ = 0;
}
inline int32_t ExternalMessage::_internal_responsestatus() const {
  return _impl_.responsestatus_;
}
inline int32_t ExternalMessage::responsestatus() const {
  // @@protoc_insertion_point(field_get:pb.common.ExternalMessage.responseStatus)
  return _internal_responsestatus();
}
inline void ExternalMessage::_internal_set_responsestatus(int32_t value) {
  
  _impl_.responsestatus_ = value;
}
inline void ExternalMessage::set_responsestatus(int32_t value) {
  _internal_set_responsestatus(value);
  // @@protoc_insertion_point(field_set:pb.common.ExternalMessage.responseStatus)
}

// string validMsg = 5;
inline void ExternalMessage::clear_validmsg() {
  _impl_.validmsg_.ClearToEmpty();
}
inline const std::string& ExternalMessage::validmsg() const {
  // @@protoc_insertion_point(field_get:pb.common.ExternalMessage.validMsg)
  return _internal_validmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExternalMessage::set_validmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.validmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.ExternalMessage.validMsg)
}
inline std::string* ExternalMessage::mutable_validmsg() {
  std::string* _s = _internal_mutable_validmsg();
  // @@protoc_insertion_point(field_mutable:pb.common.ExternalMessage.validMsg)
  return _s;
}
inline const std::string& ExternalMessage::_internal_validmsg() const {
  return _impl_.validmsg_.Get();
}
inline void ExternalMessage::_internal_set_validmsg(const std::string& value) {
  
  _impl_.validmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ExternalMessage::_internal_mutable_validmsg() {
  
  return _impl_.validmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ExternalMessage::release_validmsg() {
  // @@protoc_insertion_point(field_release:pb.common.ExternalMessage.validMsg)
  return _impl_.validmsg_.Release();
}
inline void ExternalMessage::set_allocated_validmsg(std::string* validmsg) {
  if (validmsg != nullptr) {
    
  } else {
    
  }
  _impl_.validmsg_.SetAllocated(validmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.validmsg_.IsDefault()) {
    _impl_.validmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.ExternalMessage.validMsg)
}

// bytes data = 6;
inline void ExternalMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ExternalMessage::data() const {
  // @@protoc_insertion_point(field_get:pb.common.ExternalMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExternalMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.common.ExternalMessage.data)
}
inline std::string* ExternalMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:pb.common.ExternalMessage.data)
  return _s;
}
inline const std::string& ExternalMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ExternalMessage::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ExternalMessage::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ExternalMessage::release_data() {
  // @@protoc_insertion_point(field_release:pb.common.ExternalMessage.data)
  return _impl_.data_.Release();
}
inline void ExternalMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.common.ExternalMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eMsg_2eproto
